# -*- coding: utf-8 -*-
"""IrDevIndextest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cm4vE1I50wOI0SjEI5mlf-s-nJpB6E8y
"""

import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
from streamlit_folium import st_folium
import os
import plotly.graph_objects as go

def load_data():
    # Get the directory where the script is located
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Construct absolute file paths
    geojson_path = os.path.join(script_dir, 'IRN_adm.json')
    excel_path = os.path.join(script_dir, 'IrDevIndextest.xlsx')

    # Load the GeoJSON file
    try:
        gdf = gpd.read_file(geojson_path)
        gdf.crs = 'epsg:4326'
    except Exception as e:
        st.error(f"Error loading GeoJSON file: {e}")
        st.stop()

    # Load the Excel file
    try:
        excel_file = pd.ExcelFile(excel_path)
    except Exception as e:
        st.error(f"Error loading Excel file: {e}")
        st.stop()

    # Load the 'Index' sheet
    try:
        index_df = excel_file.parse('Index')
        sheet_options = index_df.set_index('index code')['index'].to_dict()
    except Exception as e:
        st.error(f"Error parsing Index sheet: {e}")
        st.stop()

    # Load the Location ID sheet
    try:
        location_df = excel_file.parse('Location ID')
        location_dict = location_df.set_index('ID_1')['NAME_1'].to_dict()
    except Exception as e:
        st.error(f"Error parsing Location ID sheet: {e}")
        st.stop()

    return gdf, excel_file, sheet_options, location_dict

def calculate_national_averages(excel_file, sheet_name, years):
    """Calculate national averages for each year"""
    df = excel_file.parse(sheet_name)
    averages = {}
    for year in years:
        averages[year] = df[year].mean()
    return averages

def get_province_data(excel_file, sheet_name, province_id, years):
    """Get data for a specific province"""
    df = excel_file.parse(sheet_name)
    province_data = df[df['ID_1'] == province_id]
    return {year: province_data[year].iloc[0] for year in years}

def create_line_chart(national_averages, province_data=None, province_name=None):
    """Create line chart with national averages and optional province data"""
    years = list(national_averages.keys())
    fig = go.Figure()

    # Add national average line
    fig.add_trace(go.Scatter(
        x=years,
        y=[national_averages[year] for year in years],
        name='National Average',
        line=dict(color='blue', width=2)
    ))

    # Add province line if province is selected
    if province_data and province_name:
        fig.add_trace(go.Scatter(
            x=years,
            y=[province_data[year] for year in years],
            name=f'{province_name}',
            line=dict(color='red', width=2)
        ))

    fig.update_layout(
        title='Trend Over Years',
        xaxis_title='Year',
        yaxis_title='Value',
        hovermode='x unified',
        height=400
    )

    return fig

def create_map(gdf, excel_file, sheet_options, location_dict, selected_index_code, year, reverse_colors):
    sheet = sheet_options[selected_index_code]
    df = excel_file.parse(sheet)

    temp_df = df[['ID_1', year]]
    merged_gdf = gdf.merge(temp_df, on='ID_1', how='left')

    m = folium.Map(location=[32, 53], zoom_start=5)

    fill_color = 'Reds_r' if reverse_colors else 'Reds'

    choropleth = folium.Choropleth(
        geo_data=merged_gdf.to_json(),
        name='choropleth',
        data=merged_gdf,
        columns=['ID_1', year],
        key_on='feature.properties.ID_1',
        fill_color=fill_color,
        fill_opacity=0.8,
        line_opacity=0.0,
        legend_name=f'{selected_index_code} - {year}'
    ).add_to(m)

    # Add GeoJson layer with click events
    for feature in choropleth.geojson.data['features']:
        try:
            feature_id = feature['properties']['ID_1']
            feature_name = location_dict.get(feature_id, "Name Not Found")
            data_value = feature['properties'][year]
            popup_text = f"{feature_name}: {data_value:.2f}"

            folium.features.GeoJson(
                feature,
                name=feature_name,
                tooltip=folium.Tooltip(popup_text)
            ).add_to(m)

        except KeyError as e:
            st.error(f"KeyError: {e}. Feature: {feature}")
            continue

    return m

def main():
    st.set_page_config(page_title="Geographic Dashboard", layout="wide")

    st.title("Geographic Development Index Dashboard")

    # Add file uploaders for the data files
    uploaded_geojson = st.file_uploader("Upload GeoJSON file (IRN_adm.json)", type=['json'])
    uploaded_excel = st.file_uploader("Upload Excel file (IrDevIndextest.xlsx)", type=['xlsx'])

    if not (uploaded_geojson and uploaded_excel):
        st.warning("Please upload both the GeoJSON and Excel files to continue.")
        st.stop()

    # Save uploaded files temporarily
    with open('IRN_adm.json', 'wb') as f:
        f.write(uploaded_geojson.getvalue())
    with open('IrDevIndextest.xlsx', 'wb') as f:
        f.write(uploaded_excel.getvalue())

    # Load data
    try:
        gdf, excel_file, sheet_options, location_dict = load_data()
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return

    # Create sidebar controls
    st.sidebar.header("Dashboard Controls")

    selected_index_code = st.sidebar.selectbox(
        "Select Indicator:",
        options=list(sheet_options.keys()),
        format_func=lambda x: f"{x} - {sheet_options[x]}"
    )

    year = st.sidebar.selectbox(
        "Select Year:",
        options=['2019', '2020', '2021', '2022', '2023']
    )

    reverse_colors = st.sidebar.checkbox("Reverse Colors")

    # Add info box above the map
    st.markdown("""
        <style>
        .info-box {
            padding: 15px;
            background-color: #f0f2f6;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        </style>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown(f"""
        <div class="info-box">
            <h3>Currently Viewing:</h3>
            <p><strong>Indicator:</strong> {selected_index_code} - {sheet_options[selected_index_code]}</p>
            <p><strong>Year:</strong> {year}</p>
        </div>
        """, unsafe_allow_html=True)

    # Create and display map
    try:
        m = create_map(gdf, excel_file, sheet_options, location_dict,
                      selected_index_code, year, reverse_colors)
        map_data = st_folium(m, width=1200, height=600)

        # Calculate national averages
        years = ['2019', '2020', '2021', '2022', '2023']
        national_averages = calculate_national_averages(
            excel_file,
            sheet_options[selected_index_code],
            years
        )

        # Handle map clicks
        if map_data['last_clicked']:
            clicked_location = map_data['last_clicked']
            # Find the province that was clicked
            for feature in m._children['choropleth'].geojson.data['features']:
                coords = feature['geometry']['coordinates'][0][0]
                if isinstance(coords[0], list):
                    coords = coords[0]
                if abs(coords[0] - clicked_location['lng']) < 0.1 and \
                   abs(coords[1] - clicked_location['lat']) < 0.1:
                    province_id = feature['properties']['ID_1']
                    province_name = location_dict[province_id]
                    province_data = get_province_data(
                        excel_file,
                        sheet_options[selected_index_code],
                        province_id,
                        years
                    )
                    fig = create_line_chart(national_averages, province_data, province_name)
                    st.plotly_chart(fig, use_container_width=True)
                    break
        else:
            # Show only national averages if no province is selected
            fig = create_line_chart(national_averages)
            st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"Error creating visualization: {e}")

if __name__ == "__main__":
    main()