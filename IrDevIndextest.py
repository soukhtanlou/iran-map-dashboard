# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cm4vE1I50wOI0SjEI5mlf-s-nJpB6E8y
"""

import pandas as pd
import geopandas as gpd
import folium
import streamlit as st

# Load the GeoJSON file
try:
    gdf = gpd.read_file('IRN_adm.json')  # Adjust path if needed
except FileNotFoundError:
    st.error("IRN_adm.json not found. Please upload it.")
    st.stop() # Stop execution if file not found

gdf.crs = 'epsg:4326'

# Load the Excel file
try:
    excel_file = pd.ExcelFile('IrDevIndextest.xlsx') # Adjust path if needed
except FileNotFoundError:
    st.error("IrDevIndextest.xlsx not found. Please upload it.")
    st.stop()

# Load the 'Index' sheet
index_df = excel_file.parse('Index')
sheet_options = index_df.set_index('index code')['index'].to_dict()

# Load the Location ID sheet to get the names
location_df = excel_file.parse('Location ID')
location_dict = location_df.set_index('ID_1')['NAME_1'].to_dict()

# Streamlit widgets
selected_index_code = st.selectbox('Indicator:', options=list(sheet_options.keys()), index=0)
year = st.selectbox('Year:', options=['2019', '2020', '2021', '2022', '2023'], index=4) # Default to 2023
reverse_colors = st.checkbox('Reverse Colors')

def create_map(selected_index_code, year, reverse_colors):
    sheet = sheet_options[selected_index_code]
    df = excel_file.parse(sheet)

    temp_df = df[['ID_1', year]]

    merged_gdf = gdf.merge(temp_df, on='ID_1', how='left')

    m = folium.Map(location=[32, 53], zoom_start=5)

    fill_color = 'YlGn_r' if reverse_colors else 'YlGn'

    choropleth = folium.Choropleth(
        geo_data=merged_gdf.to_json(),
        name='choropleth',
        data=merged_gdf,
        columns=['ID_1', year],
        key_on='feature.properties.ID_1',
        fill_color=fill_color,
        fill_opacity=0.8,
        line_opacity=0.0,
        legend_name=f'{selected_index_code} - {year}'
    ).add_to(m)

    for feature in choropleth.geojson.data['features']:
        try:
            feature_id = feature['properties']['ID_1']
            feature_name = location_dict.get(feature_id, "Name Not Found")
            data_value = feature['properties'][year]

            folium.features.GeoJson(
                feature,
                name=feature_name,
                tooltip=folium.Tooltip(f"{feature_name}: {data_value:.2f}")
            ).add_to(m)

        except KeyError as e:
            print(f"KeyError: {e}. Feature: {feature}")  # Keep this for debugging
            continue

    st.components.v1.html(m._repr_html(), height=500)  # Display map in Streamlit

# Call the function to display the map
create_map(selected_index_code, year, reverse_colors)